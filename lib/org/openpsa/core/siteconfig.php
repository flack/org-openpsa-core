<?php
/**
 * @package org.openpsa.core
 * @author CONTENT CONTROL http://www.contentcontrol-berlin.de/
 * @copyright CONTENT CONTROL http://www.contentcontrol-berlin.de/
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License
 */

/**
 * Helper class that serves as a cache for OpenPSA site information
 *
 * It locates topics for specific components used in OpenPSA and automatically
 * generates a cached version of the site structure in the config snippet
 *
 * @package org.openpsa.core
 */
class org_openpsa_core_siteconfig
{
    use midcom_baseclasses_components_base;

    /**
     * The components for which we're creating the structure information
     *
     * @var array
     */
    private $components = [];

    private $data = [];

    /**
     * @var midcom_db_snippet
     */
    private $snippet;

    /**
     * @var org_openpsa_core_siteconfig
     */
    private static $instance = null;

    public function __construct()
    {
        $this->_component = 'org.openpsa.core';

        $this->components = $this->_config->get_array('siteconfig_components');
        $this->load_snippet();
    }

    public static function get_instance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self;
        }

        return self::$instance;
    }

    private function initialize_site_structure()
    {
        if (empty($this->components)) {
            return;
        }

        foreach ($this->components as $component) {
            $node = midcom_helper_misc::find_node_by_component($component);
            $parts = explode('.', $component);
            $last = array_pop($parts);
            if (is_array($node)) {
                $this->data[$last . '_guid'] = $node[MIDCOM_NAV_OBJECT]->guid;
                $this->data[$last . '_full_url'] = $node[MIDCOM_NAV_FULLURL];
                $this->data[$last . '_relative_url'] = $node[MIDCOM_NAV_RELATIVEURL];
            } else {
                $this->data[$last . '_guid'] = false;
                $this->data[$last . '_full_url'] = false;
                $this->data[$last . '_relative_url'] = false;
            }
        }
        $data = var_export($this->data, true);
        // Remove opening and closing array( ) lines, because that's the way midcom likes it
        $data = preg_replace(['/^.*?\n/', '/\n.*?$/'], '', $data);
        $this->snippet->code = "//AUTO-GENERATED BY " . __CLASS__ . "\n" . $data;

        midcom::get()->auth->request_sudo('org.openpsa.core');
        $this->snippet->update();
        midcom::get()->auth->drop_sudo();

        midcom::get()->uimessages->add($this->_l10n->get('org.openpsa.core'), $this->_l10n->get('site structure cache created'));
    }

    /**
     * Save the configuration to the config snippet
     */
    private function load_snippet()
    {
        midcom::get()->auth->request_sudo('org.openpsa.core');
        $lib_snippetdir = new midcom_db_snippetdir();
        if (!$lib_snippetdir->get_by_path("/org.openpsa.cache")) {
            $lib_snippetdir = new midcom_db_snippetdir();
            $lib_snippetdir->name = 'org.openpsa.cache';
            if (!$lib_snippetdir->create()) {
                throw new midcom_error("Failed to create snippetdir /org.openpsa.cache: " . midcom_connection::get_error_string());
            }
        }

        $this->snippet = new midcom_db_snippet();
        if (!$this->snippet->get_by_path("/org.openpsa.cache/siteconfig")) {
            $this->snippet = new midcom_db_snippet();
            $this->snippet->snippetdir = $lib_snippetdir->id;
            $this->snippet->name = 'siteconfig';
            $this->snippet->create();
            $this->initialize_site_structure();
        }
        midcom::get()->auth->drop_sudo();
        $this->data = midcom_helper_misc::parse_config($this->snippet->code, "/org.openpsa.cache/siteconfig");
    }

    /**
     * Check if a node for a given component is available
     */
    public function node_exists(string $component) : bool
    {
        return !empty($this->get_node_guid($component));
    }

    /**
     * Retrieve the full URL for the first topic of a given component
     *
     * @return mixed The component URL or false
     */
    public function get_node_full_url(string $component)
    {
        return $this->get($component, '_full_url');
    }

    /**
     * Retrieve the relative URL for the first topic of a given component
     *
     * @return mixed the component URL or false
     */
    public function get_node_relative_url(string $component)
    {
        return $this->get($component, '_relative_url');
    }

    /**
     * Retrieve the GUID for the first topic of a given component
     *
     * @return mixed the component URL or false
     */
    public function get_node_guid(string $component)
    {
        return $this->get($component, '_guid');
    }

    private function get(string $component, string $suffix)
    {
        if (!array_key_exists($component, $this->components)) {
            return false;
        }
        $parts = explode('.', $component);
        $type = array_pop($parts);

        $key = $type . $suffix;
        if (!array_key_exists($key, $this->data)) {
            return null;
        }
        if (!midcom::get()->auth->admin) {
            $user_id = midcom::get()->auth->acl->get_user_id();
            if (   !$this->data[$type . '_guid']
                || !midcom::get()->auth->acl->can_do_byguid('midgard:read', $this->data[$type . '_guid'], midcom_db_topic::class, $user_id)) {
                return null;
            }
        }
        return $this->data[$key];
    }
}
